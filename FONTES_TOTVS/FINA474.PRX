#INCLUDE "PROTHEUS.CH"
#INCLUDE "FINA474.CH" 
#include "FILEIO.CH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "FWLIBVERSION.CH"

STATIC __cProcPrinc := "FINA474"
STATIC __oQry474    := NIL
STATIC __lUpdated	:= NIL
STATIC __nTamHora 	:= NIL
STATIC __lIsBlind	:= .F.
STATIC __lF474EFT	:= NIL
STATIC __lF474CTA 	:= NIL
STATIC __lEfetTrf	:= NIL
STATIC __lExtAPI	:= NIL

//-------------------------------------------------------------------
/*/{Protheus.doc} FINA474
	Rotina de Manutenção de Extratos Bancários

	@type  Function 
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
/*/
//-------------------------------------------------------------------
Function FINA474(aRotAuto As Array, nOpcAuto As Numeric)

	Local cXFilFK5 as Character
	Local oBrowse  as Object

	Private cCadastro as Character
	Private aRotina   as Array

	// ExecAuto
	Private lF474Auto as Logical
	Private aAutoCab  as Array

	DEFAULT aRotAuto := {}
	DEFAULT nOpcAuto := 3

	If Type('aMsgSch') != "A"
	 	aMsgSch := {}	//Utilizada pelo FINA475 - Schedule
	Endif

	__lIsBlind	:= IsBlind()

	//------------------------------------------------------------------
	// Restringe o uso do programa ao Financeiro
	//------------------------------------------------------------------
	If !__lIsBlind .AND. !(AmIIn(6)) // Só Financeiro
		Return
	Endif

	aRotina  := Menudef()

	//Verifica se dicionário está atualizado
	If F474DicOk()

		If __lEfetTrf == NIL
			__lEfetTrf := SEE->(ColumnPos("EE_EFTTRF")) > 0
		EndIF

		If __lExtAPI == NIL
			__lExtAPI := SEE->(ColumnPos("EE_EXTAPI")) > 0
		EndIf

		lF474Auto := ValType(aRotAuto) == "A" .And. !Empty(aRotAuto)
		aAutoCab  := aRotAuto

		If lF474Auto
			MBrowseAuto(nOpcAuto,aAutoCab,"SIF",.F.,.F.)
		Else
			If !GetHlpLGPD({"A6_COD", "A6_AGENCIA", "A6_NUMCON"})

				cXFilFK5 := xFilial("FK5")

				oBrowse := NIL

				cCadastro	:= STR0001	//"Manutenção de Extratos Bancários"

				dbSelectArea("SIF")
				dbSelectArea("SIG")
				If xFilial("SIG") == cXFilFK5 .And. xFilial("SIF") == cXFilFK5
					oBrowse := FWMBrowse():New()
					oBrowse:SetAlias('SIF')
					oBrowse:SetDescription(STR0001)	//"Manutenção de Extratos Bancários"
					oBrowse:AddLegend( "IF_STATUS=='1'", "GREEN" , STR0002 ) 	//"Extrato importado com sucesso"
					oBrowse:AddLegend( "IF_STATUS=='2'", "YELLOW", STR0003 ) 	//"Conciliação em andamento	
					oBrowse:AddLegend( "IF_STATUS=='3'", "BLACK" , STR0004 )  	//"Conciliado"
					oBrowse:AddLegend( "IF_STATUS=='4'", "RED"   , STR0063 ) 	//"Falha de importação do extrato"
					oBrowse:Activate()
				Else
					Help(" ",1,"FIN474FK5",,STR0005, 1, 0 ) //"As tabelas da rotina devem ter o mesmo compartilhamento da tabela FK5"
				EndIf

			Endif
		Endif
	Else
		MsgAlert(STR0064 + CRLF + STR0065, STR0066)		//"Seu dicionário se encontra desatualizado, não contando com a nova estrutura criada para Importação de Extratos para Conciliação."###"Favor verificar atualizações do cadastro de Comunicação Remota (SEE)"###"Dicionário desatualizado."
	Endif
	FWFreeArray(aRotina)
	aRotina := {}

Return()


//-------------------------------------------------------------------
/*/{Protheus.doc} FINA474
	Função de definição do Menu da Rotina
	
	@type  Function
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
	/*/
//-------------------------------------------------------------------
Static Function MenuDef()     

	Local aRotina as Array

	aRotina	:= {}

	ADD OPTION aRotina TITLE STR0006 ACTION 'F474IMPORT()'		OPERATION 3 ACCESS 0 //"Importar"	
	ADD OPTION aRotina TITLE STR0007 ACTION 'F474VIS()'			OPERATION 2 ACCESS 0 //'Visualizar'	
	ADD OPTION aRotina TITLE STR0008 ACTION 'F474EXC()'			OPERATION 5 ACCESS 0 //'Excluir'

Return(Aclone(aRotina))


//-------------------------------------------------------------------
/*/{Protheus.doc} ModelDef
	Função de definição do modelo do extrato bancário

	@type  Function 
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
		
/*/
//-------------------------------------------------------------------
Static Function ModelDef()

	Local oModel as Object
	Local oStr1  as Object
	Local oStr2  as Object

	oStr1:= FWFormStruct(1,'SIF')
	oStr2:= FWFormStruct(1,'SIG')

	oModel := MPFormModel():New('FINA474')
	oModel:SetDescription(STR0010) //'Extrato Bancario'
	oModel:addFields('SIFMASTER',,oStr1)

	oStr2:AddField(STR0011,STR0011 , 'IG_COR', 'BT',15,,,,,,{|| F474IGSTA() },,.F.,.T. )//'Status'
	oModel:addGrid('SIGDETAIL','SIFMASTER',oStr2)
	oModel:SetRelation('SIGDETAIL', { { 'IG_FILIAL', 'xFilial("SIG")' }, { 'IG_IDPROC', 'IF_IDPROC' } }, SIG->(IndexKey(1)) )

	oModel:getModel('SIFMASTER'):SetDescription(STR0010)//'Extrato Bancario'
	oModel:getModel('SIGDETAIL'):SetDescription(STR0012)//'Movimento Extrato'
	oModel:getModel('SIGDETAIL'):SetOptional(.T.)

	oModel:SetVldActivate( {|oModel| FI474VLMOD(oModel) } )
	oModel:GetModel( 'SIGDETAIL' ):SetNoInsertLine( .T. )
	oModel:GetModel( 'SIGDETAIL' ):SetNoDeleteLine( .T. )
	oModel:GetModel( 'SIGDETAIL' ):SetNoUpdateLine( .T. )

Return oModel


//-------------------------------------------------------------------
/*/{Protheus.doc} ViewDef
	Função de definição do modelo do extrato bancário

	@type  Function 
	@author pequim
	@since 20/07/2022
	@version 12.1.2310		
/*/
//-------------------------------------------------------------------
Static Function ViewDef()

	Local oView  as Object
	Local oModel as Object
	Local oStr1  as Object
	Local oStr2  as Object

	oModel := ModelDef()
	oStr1:= FWFormStruct(2, 'SIF')
	oStr2:= FWFormStruct(2, 'SIG')

	oView := FWFormView():New()
	oView:SetModel(oModel)
	oView:AddField( 'SIF_VIEW' , oStr1, 'SIFMASTER' )
	oView:AddGrid( 'SIG_VIEW' , oStr2, 'SIGDETAIL' )
	oView:CreateHorizontalBox( 'BOXFORM1', 30)

	oStr1:RemoveField( 'IF_STATUS' )
	oStr1:RemoveField( 'IF_ARQSUM' )

	oStr2:RemoveField( 'IG_IDPROC' )
	oStr2:RemoveField( 'IG_CONEXT' )
	oStr2:RemoveField( 'IG_MSUIDT' )

	oStr1:SetProperty( 'IF_HORA'	, MVC_VIEW_ORDEM,	'04')
	oStr1:SetProperty( 'IF_DESC'	, MVC_VIEW_ORDEM,	'05')
	oStr1:SetProperty( 'IF_BANCO'	, MVC_VIEW_ORDEM,	'06')
	oStr1:SetProperty( 'IF_AGENCIA'	, MVC_VIEW_ORDEM,	'07')
	oStr1:SetProperty( 'IF_CONTA'	, MVC_VIEW_ORDEM,	'08')
	oStr1:SetProperty( 'IF_SUBCTA'	, MVC_VIEW_ORDEM,	'09')
	oStr1:SetProperty( 'IF_ARQIMP'	, MVC_VIEW_ORDEM,	'10')
	oStr1:SetProperty( 'IF_ARQCFG'	, MVC_VIEW_ORDEM,	'11')

	oStr1:SetProperty( 'IF_ARQIMP'	, MVC_VIEW_TITULO,	STR0072)	//'Arquivo de Extrato Importado'
	oStr1:SetProperty( 'IF_ARQCFG'	, MVC_VIEW_TITULO,	STR0073)	//'Arquivo de Configuração'

	oStr2:SetProperty( 'IG_BCOEXT'	, MVC_VIEW_ORDEM,	'05')

	If SIF->IF_STATUS == '4'	//falha da importação
		oStr2:RemoveField( 'IG_DOCEXT' )
		oStr2:RemoveField( 'IG_VLREXT' )
		oStr2:RemoveField( 'IG_TIPEXT' )
		oStr2:RemoveField( 'IG_TIPMOV' )
		oStr2:RemoveField( 'IG_TIPDSC' )
		oStr2:RemoveField( 'IG_CARTER' )
		oStr2:RemoveField( 'IG_HISTEXT' )
		oStr2:RemoveField( 'IG_DTMOVI' )
		oStr2:RemoveField( 'IG_AGEMOV' )
		oStr2:RemoveField( 'IG_CONMOV' )
		oStr2:RemoveField( 'IG_DOCMOV' )
		oStr2:RemoveField( 'IG_VLRMOV' )
		oStr2:RemoveField( 'IG_HISMOV' )
		oStr2:RemoveField( 'IG_NATMOV' )
		oStr2:RemoveField( 'IG_SEQMOV' )
		oStr2:RemoveField( 'IG_EFETIVA' )
		oStr2:RemoveField( 'IG_FILORIG' )
		oStr2:RemoveField( 'IG_DTEXTR' )
		oStr2:RemoveField( 'IG_AGEEXT' )
		oStr2:RemoveField( 'IG_STATUS' )
		oStr2:RemoveField( 'IG_BCOEXT' )
	Else
		oStr2:RemoveField( 'IG_DESCRFA' )
	EndIf

	oStr2:AddField( 'IG_COR','01',STR0011,STR0011,, 'BC','@BMP',,,.T. ) //Status

	oView:CreateHorizontalBox( 'BOXFORM3', 70)
	oView:SetOwnerView('SIF_VIEW','BOXFORM1')
	oView:SetOwnerView('SIG_VIEW','BOXFORM3')

	oView:EnableTitleView('SIG_VIEW' , STR0010 ) //'Movimento Extrato'
	oView:EnableTitleView('SIF_VIEW' , STR0012 ) //'Extrato Bancario'

	oView:AddIncrementField('SIG_VIEW' , 'IG_ITEM' ) 

Return oView


//-------------------------------------------------------------------
/*/{Protheus.doc} FI474VLMOD
	Realiza a validação do modelo de dados do MVC antes de iniciar a rotina

	@type  Function 
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
	@param oModel, Object, Modelo de dados
		
/*/
//-------------------------------------------------------------------
Static Function FI474VLMOD(oModel As Object)

	Local nOperation As Numeric
	Local lRet As Logical

	nOperation := oModel:GetOperation()
	lRet := .T.

	If lRet .And. (nOperation == MODEL_OPERATION_DELETE )
		
		If SIF->IF_STATUS == '2' .Or. SIF->IF_STATUS == '3'
			Help(" ",1,"FI474EXC01",,STR0013 ,1,0)	//"Somente extratos não conciliados podem ser excluídos."
			lRet:=.F.
		EndIf
		
	EndIf

Return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} FIGSTATUS
	Função que retorna a cor da tabela SIG

	@type  Function 
	@author pequim
	@since 20/07/2022
	@version 12.1.2310		
/*/
//-------------------------------------------------------------------
Function F474IGSTA()

	Local cCor as Character

	cCor := F474COR(SIG->IG_STATUS)

Return cCor


//-------------------------------------------------------------------
/*/{Protheus.doc} F474COR
	Função que retorna a cor da legenda

	@type  Function 
	@author pequim
	@since 20/07/2022
	@version 12.1.2310

	@param cStatus, Character, Status de conciliação
/*/
//-------------------------------------------------------------------
Function F474COR(cStatus As Character)

	Local cCor as Character

	cCor := ""

	IF cStatus == '2'
		cCor := "BR_AMARELO"
	ElseIf cStatus == '3'
		cCor := "BR_VERDE"
	ElseIf cStatus == '4'
		cCor := "BR_CINZA"
	ElseIf cStatus == '5'
		cCor := "BR_CANCEL
	ElseIf cStatus == '6'
		cCor := "BR_PINK"
	Else
		cCor := "BR_VERMELHO"
	EndIf

Return cCor

//-------------------------------------------------------------------
/*/{Protheus.doc} F474Import
	Realiza a importação do arquivo de extrato e grava na tabela SIG

	@type  Function
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
	@param cAlias, Character, Alias da tabela
	@param nReg, Numeric, Recno do registro 
	@param nOpc, Numeric, Opção da operação	
		
/*/
//-------------------------------------------------------------------
Function F474Import()

	Local aConfig1  as Array
	Local aConfig2  as Array
	Local aLog      as Array
	Local aLogLanc  as Array
	Local aParam1   as Array
	Local aParam2   as Array
	Local cDescFail as Character
	Local cIdProc   as Character
	Local cItem     as Character
	Local cProc     as Character
	Local cSubProc  as Character
	Local dDataMov  as Date
	Local lRet      as Logical
	Local nOpcA     as Numeric
	Local nX        as Numeric

	Private aTitulos as Array
	Private oStr1ulo as Object
	Private oBrowse  as Object
	PRIVATE oWizard  as Object

	aConfig1 := {}
	aConfig2 := {}
	aLog     := {}
	aLogLanc := {}
	aParam1  := {}
	aParam2  := {}
	cIdProc  := F474ProxNum("SIF")
	cItem    := Replicate("0",TamSx3("IG_ITEM")[1])
	cProc    := __cProcPrinc + "IMP"
	cSubProc := ""
	lRet     := .F.
	nOpcA    := 0
	nX       := 0

	aTitulos := {}
	oStr1ulo := NIL
	oBrowse  := NIL
	oWizard  := NIL

	If lF474Auto
		cProcAuto := cIdProc
		aConfig1  := {cIdProc    , aAutoCab[1], aAutoCab[2], aAutoCab[3], aAutoCab[4], aAutoCab[5]}
		aConfig2  := {aAutoCab[6], aAutoCab[7]}
		If FA474VlBC(aConfig1)
			If FA474VlBC(aConfig2)
				nOpcA    := 1
			Endif
		Endif
	Else
		//Etapa2 -Wizard de Importação do Extrato Bancário - Dados Bancários e Filtros dos Movimentos Bancários.
		aParam1 := {{ 1 ,STR0014,Replicate(" ",LEN(SIF->IF_IDPROC))  ,"@!" 	 ,""  ,"" ,".F." ,60 ,.T. },;	//"Processo"
					{ 1 ,STR0015,Replicate(" ",LEN(SA6->A6_COD))     ,"@!" 	 ,"ExistCpo('SA6')"  ,"SA6" ,"" ,20 ,.T. }, ; //"Banco"
					{ 1 ,STR0016,Replicate(" ",LEN(SA6->A6_AGENCIA)) ,"@!" 	 ,,,"" ,20 ,.T. }, ; //"Agencia"
					{ 1 ,STR0017,Replicate(" ",LEN(SA6->A6_NUMCON))  ,"@!" 	 ,,,"" ,20 ,.T. }, ; //"Conta"
					{ 1 ,STR0018,Replicate(" ",LEN(SEE->EE_SUBCTA))  ,"@!" 	 ,,,"" ,20 ,.T. }, ; //"Sub-Conta"
					{ 1 ,STR0019,Replicate(" ",LEN(SIF->IF_DESC))    ,"" 	 ,""  ,"" ,"" ,120 ,.T. } } //"Descrição"
		
		aConfig1 := {cIdProc ,CriaVar("A6_COD"),CriaVar("A6_AGENCIA"),CriaVar("A6_NUMCON"),CriaVar("EE_SUBCTA"), CriaVar("IF_DESC") }
		
		//Etapa3 -Wizard de Importação do Extrato Bancário - Dados de Configuração da Importação.
		aParam2 := {{ 6 ,STR0020,space(20) ,"@!" 	 ,""  ,"" ,150 ,.T.,"Todos Tipos |*.*","",GETF_LOCALHARD,.T.}, ; //"Arquivo Configuração:"
					{ 6 ,STR0021,space(20) ,"@!" 	 ,""  ,"" ,150 ,.T.,"Todos Tipos |*.*","",GETF_LOCALHARD,.T.}}	 //"Arquivo Extrato:"
		
		aConfig2 := {Space(TamSx3("IF_ARQCFG")[1]), space(TamSx3("IF_ARQIMP")[1])}
		
		//Etapa1
		oWizard := APWizard():New(	STR0001 /*<chTitle>*/, ; //"Início"			//"Manutenção de Extratos Bancários"
									STR0022, STR0023,; //"Início"###"Importação de Extratos Bancários"
									STR0024,; //"Essa rotina irá importar o arquivo de extrato bancário para posterior conciliação."
									{|| .T.}/*<bNext>*/, ;
									{|| .T.}/*<bFinish>*/,;
									/*<.lPanel.>*/, , , /*<.lNoFirst.>*/)
		
		//Etapa2
		oWizard:NewPanel( 	STR0025/*<chTitle>*/,;  //"Dados do Banco e Movimentos Bancários"
							STR0026/*<chMsg>*/, ;  //"Informações necessárias referente ao banco gerador do arquivo com as informações do extrato"
							{||.T.}/*<bBack>*/, ;
							{|| FA474VlBC(aConfig1)}/*<bNext>*/, ;
							{||.T.}/*<bFinish>*/,;
							.T./*<.lPanel.>*/,;
							{||ParamBox(aParam1 ,STR0027,aConfig1,,,.F.,120,3, oWizard:oMPanel[oWizard:nPanel]) }/*<bExecute>*/ ) //"Filtro"
		
		//Etapa3
		oWizard:NewPanel(	STR0028/*<chTitle>*/,;  //"Configuração da Importação"
							STR0029/*<chMsg>*/, ;  //"Informações necessárias referente aos arquivos de extrato bancário"
							{||.T.}/*<bBack>*/, ;
							{|| FA474VlBC(aConfig2)}/*<bNext>*/, ;
							{|| nOpcA := 1, .T. }/*<bFinish>*/,;
							.T. /*<.lPanel.>*/,;
							{||ParamBox(aParam2 ,STR0027,aConfig2,,,.F.,120,3, oWizard:oMPanel[oWizard:nPanel]) }/*<bExecute>*/ ) //"Filtro"
		
		oWizard:Activate( .T./*<.lCenter.>*/,;
						{||.T.}/*<bValid>*/, ;
						{||.T.}/*<bInit>*/, ;
						{||.T.}/*<bWhen>*/ ) 
 
	Endif

	If nOpcA == 1
		BEGIN TRANSACTION
			If lF474Auto
				lRet := F474ImpExt(aConfig1, aConfig2, 3, aLog, aLogLanc)
			Else
				MsgRun(STR0030,STR0023,{|| lRet := F474ImpExt(aConfig1, aConfig2, 3, aLog, aLogLanc) })	//"Importando arquivo. Aguarde..."###"Importação de Extratos Bancários"
			Endif

			If !lRet
				DisarmTransaction()
			EndIf
		END TRANSACTION
		
		If !lRet
			cTxtErro	:= ""
			cTxtAlert	:= ""
			dDataMov	:= MsDate()

			BEGIN TRANSACTION

				F474GRVSIF(aConfig1, aConfig2 , dDataMov , '4')

				For nX := 1 to Len(aLog)
					cDescFail := "[ERRO] " + STR0031 + cValtoChar(aLog[nX][1]) +"|"+ aLog[nX][2]		//"Linha do Arquivo "
					cItem := Soma1(cItem)
					F474GRVSIG(aConfig1[1], cItem, '4', dDataMov, "", 0, "", "", aConfig1[2], aConfig1[3], aConfig1[4], "", cDescFail)

					If lF474Auto
						cTxtErro += cDescFail + CRLF
						If __lIsBlind
							Aadd(aMsgSch, cDescFail )
						Endif
					Endif
				Next nX	
				
				For nX := 1 to len(aLogLanc)
					cDescFail := "[ALERTA] " + aLogLanc[nX][2]
					cItem := Soma1(cItem)
					F474GRVSIG(aConfig1[1], cItem, '4', dDataMov, "", 0, "", "", aConfig1[2], aConfig1[3], aConfig1[4], "", cDescFail)

					If lF474Auto
						cTxtAlert += cDescFail + CRLF
						If __lIsBlind
							Aadd(aMsgSch, cDescFail )
						Endif
					Endif
				Next nX
			END TRANSACTION			

			If lF474Auto
				cTxtLog := cProc +"|"+cUserName+"|"+STR(THREADID())+"|"+Dtoc(Date())+"|"+Time()+"|"+ALLTRIM(STR(SECONDS()))+"|"
				If !Empty(cTxtErro)
					cTxtLog += cTxtErro
				Endif
				If !Empty(cTxtAlert)
					cTxtLog += cTxtAlert
				Endif

				FWLogMsg("ERROR", /*cTransactionId*/, "SIGAFIN", "FINA474", /*cStep*/, '01', cTxtLog, /*nMensure*/, /*nElapseTime*/, /*aMessage*/)
			Else
				MSGALERT( STR0067 + CRLF + STR0068 , STR0059 )	//"Ocorreram problemas na importação do arquivo de extrato."###"Clique em Visualizar para verificar as ocorrências."###"Atenção"
			Endif
		Else
			If !lF474Auto
				MSGINFO( STR0069, STR0070 )		//"Extrato importado com sucesso."###"Aviso"
			Endif
		EndIf
	Endif	

	FWFreeArray(aParam1)
	FWFreeArray(aParam2)
	FWFreeArray(aConfig1)
	FWFreeArray(aConfig2)
	__oQry474    := NIL


Return .T.


//-------------------------------------------------------------------
/*/{Protheus.doc} F474ImpExt

	Função que recebe os dados do wizard e processa a importação do arquivo 

	@type  Function 
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
		
/*/
//-------------------------------------------------------------------
Function F474ImpExt(aConfig1 As Array, aConfig2 As Array, nOpc As Numeric, aLog As Array,aLogLanc As Array)

	Local cPosAge   as Character
	Local cPosBco   as Character
	Local cPosCta   as Character
	Local cPosData  as Character
	Local cPosDescr as Character
	Local cPosDif   as Character
	Local cPosNum   as Character
	Local cPosOcor  as Character
	Local cPosValor as Character
	Local lFebraban as Logical
	Local lRet      as Logical
	Local nLenAge   as Numeric
	Local nLenBco   as Numeric
	Local nLenCta   as Numeric
	Local nLenData  as Numeric
	Local nLenDescr as Numeric
	Local nLenDif   as Numeric
	Local nLenNum   as Numeric
	Local nLenOcor  as Numeric
	Local nLenValor as Numeric
	Local nTamDet   as Numeric

	Default aConfig1 := {}
	Default aConfig2 := {}
	Default nOpc     := 0
	Default aLog     := {}
	Default aLogLanc := {}
	Default aLog     := {}

	cPosAge   := ""
	cPosBco   := ""
	cPosCta   := ""
	cPosData  := ""
	cPosDescr := ""
	cPosDif   := ""
	cPosNum   := ""
	cPosOcor  := ""
	cPosValor := ""
	lFebraban := .F.
	lRet      := .T.
	nLenAge   := 0
	nLenBco   := 0
	nLenCta   := 0
	nLenData  := 0
	nLenDescr := 0
	nLenDif   := 0
	nLenNum   := 0
	nLenOcor  := 0
	nLenValor := 0
	nTamDet   := 0

	dbSelectArea("SA6")
	SA6->(DBSetOrder(1))

	dbSelectArea("SIG")
	SIG->(DBSetOrder(1))

	dbSelectArea("SIF")
	SIF->(DBSetOrder(1))

	//Posiciona no Banco indicado 
	dbSelectArea("SEE")
	dbSetOrder(1)	//"EE_FILIAL+EE_CODIGO+EE_AGENCIA+EE_CONTA+EE_SUBCTA"
	If lF474Auto .or. MsSeek(xFilial("SEE") + aConfig1[2] + aConfig1[3] + aConfig1[4] + aConfig1[5])
		lFebraban := IF(SEE->EE_BYTESXT > 200 , .T., .f.)
		nTamDet	  := IF(SEE->EE_BYTESXT > 0, SEE->EE_BYTESXT + 2, 202 )
		nTipoDat  := SEE->EE_TIPODAT
	Else
		aAdd(aLog,{0,STR0061})	//"Verifique os parametros digitados, pois não foi possível, localizar o registro das parametrizaçães de transmissão(SEE)."
		lRet := .F.
	Endif

	If lRet
		//Leitura do arquivo de configuracao
		lRet := F474LeCfg(aConfig2[1] , aLog ,@cPosNum ,@cPosData ,@cPosValor ,@cPosOcor ,@cPosDescr ,@cPosDif ,@cPosBco ,@cPosAge ,@cPosCta , ;
					 @nLenNum ,@nLenData ,@nLenValor ,@nLenOcor ,@nLenDescr ,@nLenDif ,@nLenBco ,@nLenAge ,@nLenCta )

		If lRet
			//Leitura do arquivo de extrato
			lRet := F474LeExt( aConfig1 ,aConfig2 , aLog, aLogLanc, cPosNum ,cPosData ,cPosValor ,cPosOcor ,cPosDescr ,cPosDif ,cPosBco ,cPosAge ,cPosCta , ;
								nLenNum ,nLenData ,nLenValor ,nLenOcor ,nLenDescr ,nLenDif ,nLenBco ,nLenAge ,nLenCta , nTipoDat, nTamDet, lFebraban )
			
		Endif
	Endif

Return lRet


//-------------------------------------------------------------------
/*/{Protheus.doc} F474LeCfg
	Realiza a Leitura do arquivo de configuração do extrato

	@type  Function
	@author pequim
	@since 21/07/2022
	@version 12.1.2310
	@param aConfig2, Array, Dados do arquivo de configuração
	@return lRetr, Logical, Informa se foi possivel realizar a leitura do arquigo de configuração do extrato
	@example
	(examples)
	@see (links_or_references)
/*/
//-------------------------------------------------------------------
Function F474LeCfg(cArqConf As Character,aLog As Array , ;
					cPosNum As Character,cPosData As Character,cPosValor As Character,cPosOcor As Character,cPosDescr As Character,cPosDif As Character,cPosBco As Character,cPosAge As Character,cPosCta As Character, ;
					nLenNum As Numeric  ,nLenData As Numeric  ,nLenValor As Numeric  ,nLenOcor As Numeric  ,nLenDescr As Numeric  ,nLenDif As Numeric  ,nLenBco As Numeric  ,nLenAge As Numeric  ,nLenCta As Numeric )

	Local cBuffer   as Character
	Local cPosDCI   as Character
	Local cPosDSI   as Character
	Local cPosVSI   as Character
	Local lPosAge   as Logical
	Local lPosBco   as Logical
	Local lPosCta   as Logical
	Local lPosData  as Logical
	Local lPosDCI   as Logical
	Local lPosDescr as Logical
	Local lPosDif   as Logical
	Local lPosDSI   as Logical
	Local lPosNum   as Logical
	Local lPosOcor  as Logical
	Local lPosValor as Logical
	Local lPosVSI   as Logical
	Local lRet      as Logical
	Local nHdlConf  as Numeric
	Local nLenDCI   as Numeric
	Local nLenDSI   as Numeric
	Local nLenVSI   as Numeric
	Local nLidos    as Numeric
	Local nTamArq   as Numeric
	
	cBuffer   := ""
	cPosDCI   := ""
	cPosDSI   := ""
	cPosVSI   := ""
	lPosAge   := .F.
	lPosBco   := .F.
	lPosCta   := .f.
	lPosData  := .F.
	lPosDCI   := .F.
	lPosDescr := .F.
	lPosDif   := .F.
	lPosDSI   := .F.
	lPosNum   := .F.
	lPosOcor  := .F.
	lPosValor := .F.
	lPosVSI   := .F.
	lRet      := .T.
	nHdlConf  := 0
	nLenDCI   := 0
	nLenDSI   := 0
	nLenVSI   := 0
	nLidos    := 0
	nTamArq   := 0

	If !FILE(cArqConf)
		aAdd(aLog,{0,STR0033}) // "Arquivo de Configuração não encontrado"
		lRet := .F.
	Else
		nHdlConf:=FOPEN(cArqConf,0+64)
	EndIf

	//Leitura do arquivo de configuracao
	If lRet
		nLidos := 0
		FSEEK(nHdlConf,0,0)
		nTamArq:=FSEEK(nHdlConf,0,2)
		FSEEK(nHdlConf,0,0)

		While nLidos <= nTamArq
			
			//Verifica o tipo de qual registro foi lido
			cBuffer := Space(85)
			FREAD(nHdlConf,@cBuffer,85)
			
			If SubStr(cBuffer,1,1) == CHR(1)  // Header
				nLidos+=85
				Loop
			EndIF
			
			If SubStr(cBuffer,1,1) == CHR(4) // Saldo Final
				nLidos+=85
				Loop
			EndIf
			
			//Dados do Saldo Inicial (Bco/Ag/Cta) 
			If !lPosBco  //Nro do Banco
				cPosBco := Substr(cBuffer,17,10)
				nLenBco := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosBco := .T.
				nLidos+=85
				Loop
			EndIf
			If !lPosAge  //Agencia
				cPosAge := Substr(cBuffer,17,10)
				nLenAge := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosAge := .T.
				nLidos+=85
				Loop
			EndIf
			If !lPosCta  //Nro Cta Corrente
				cPosCta := Substr(cBuffer,17,10)
				nLenCta := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosCta := .T.
				nLidos+=85
				Loop
			Endif
			If !lPosDif   // Diferencial de Lancamento
				cPosDif := Substr(cBuffer,17,10)
				nLenDif := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosDif := .T.
				nLidos+=85
				Loop
			EndIf

			//Os dados abaixo não são utilizados na reconciliacao.
			//Estao ai apenas p/leitura do arquivo de configuracao.
			If !lPosVSI   // Valor Saldo Inicial
				cPosVSI := Substr(cBuffer,17,10)
				nLenVSI := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosVSI := .T.
				nLidos+=85
				Loop
			EndIf
			If !lPosDSI   // Data Saldo Inicial
				cPosDSI :=Substr(cBuffer,17,10)
				nLenDSI :=1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosDSI :=.T.
				nLidos+=85
				Loop
			EndIf
			If !lPosDCI   // Identificador Deb/Cred do Saldo Inicial
				cPosDCI := Substr(cBuffer,17,10)
				nLenDCI := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosDCI := .T.
				nLidos+=85
				Loop
			EndIf
			
			//Dados dos Movimentos 
			If !lPosNum  // Nro do Lancamento no Extrato
				cPosNum := Substr(cBuffer,17,10)
				nLenNum := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosNum := .T.
				nLidos+=85
				Loop
			EndIf
			
			If !lPosData  // Data da Movimentacao
				cPosData := Substr(cBuffer,17,10)
				nLenData := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosData := .T.
				nLidos+=85
				Loop
			EndIf
			
			If !lPosValor  // Valor Movimentado
				cPosValor := Substr(cBuffer,17,10)
				nLenValor := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosValor = .T.
				nLidos+=85
				Loop
			EndIf
			
			If !lPosOcor // Ocorrencia do Banco
				cPosOcor := Substr(cBuffer,17,10)
				nLenOcor := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosOcor :=.T.
				nLidos+=85
				Loop
			EndIf
			
			If !lPosDescr  // Descricao do Lancamento
				cPosDescr := Substr(cBuffer,17,10)
				nLenDescr := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosDescr := .T.
				nLidos+=85
				Loop
			EndIf
			
			If !lPosDif   // Diferencial de Lancamento
				cPosDif  := Substr(cBuffer,17,10)
				nLenDif  := 1+Int(Val(Substr(cBuffer,20,3)))-Int(Val(Substr(cBuffer,17,3)))
				lPosDif  := .T.
				nLidos+=85
				Loop
			EndIf
			
			Exit
		Enddo

		//fecha arquivo de configuracao
		Fclose(nHdlConf)
	Endif

Return lRet


//---------------------------------------------------------------------------------
/*/{Protheus.doc} F474LeExt
	
	Leitura do arquivo de extrato bancário

	@type  Function
	@author pequim
	@since 21/07/2022
	@version 12.1.2310

	@param aConfig2[2], param_type, param_descr
	@return return_var, return_type, return_description

*/
//---------------------------------------------------------------------------------
Function F474LeExt(aConfig1 As Array,aConfig2 As Array, aLog As Array, aLogLanc As Array, ;
					cPosNum As Character,cPosData As Character,cPosValor As Character,cPosOcor As Character,cPosDescr As Character,cPosDif As Character,cPosBco As Character,cPosAge As Character,cPosCta As Character,;
					nLenNum As Numeric  ,nLenData As Numeric  ,nLenValor As Numeric  ,nLenOcor As Numeric  ,nLenDescr As Numeric  ,nLenDif As Numeric  ,nLenBco As Numeric  ,nLenAge As Numeric  ,nLenCta As Numeric  ,;
					nTipoDat As Numeric ,nTamDet As Numeric   ,lFebraban As Logical )

	Local aConta    As Array
	Local cAgencia  As Character
	Local cArqEnt   As Character
	Local cBanco    As Character
	Local cBuffer   As Character
	Local cChkSum   As Character
	Local cCodMov   As Character
	Local cConta    As Character
	Local cDataBco  As Character
	Local cDebCred  As Character
	Local cDescMov  As Character
	Local cDescrMov As Character
	Local cDifer    As Character
	Local cErro     As Character
	Local cItem     As Character
	Local cNumMov   As Character
	Local cTipoMov  As Character
	Local dDataMov  As Date
	Local lGravaSIF as Logical
	Local lRet      As Logical
	Local lTemLacto As Logical
	Local nContReg  As Numeric
	Local nHdlBco   As Numeric
	Local nLidos    As Numeric
	Local nLinha    As Numeric
	Local nPosAge   as Numeric
	Local nPosBco   as Numeric
	Local nPosCta   as Numeric
	Local nPosData  as Numeric
	Local nPosDescr as Numeric
	Local nPosDIf   as Numeric
	Local nPosNum   as Numeric
	Local nPosOcor  as Numeric
	Local nPosValor as Numeric
	Local nTamA6Agn As Numeric
	Local nTamA6Cod As Numeric
	Local nTamA6Num As Numeric
	Local nTamArq   As Numeric
	Local nValorMov As Numeric
	Local lFina475	:= FwIsInCallStack("FINA475") As Logical
	Local oData     := JsonObject():New() as Json

	aConta    := {}
	nContReg  := 0
	nHdlBco   := 0
	nLidos    := 0
	nLinha    := 0
	nTamArq   := 0
	nValorMov := 0
	nTamA6Agn := TamSX3( "A6_AGENCIA" )[1]
	nTamA6Cod := TamSX3( "A6_COD" )[1]
	nTamA6Num := TamSX3( "A6_NUMCON" )[1]
	cAgencia  := Space(nTamA6Agn)
	cBanco    := Space(nTamA6Cod)
	cConta    := Space(nTamA6Num)
	cArqEnt   := ""
	cBuffer   := ""
	cChkSum   := ""
	cCodMov   := ""
	cDataBco  := ""
	dDataMov  := CTOD("//")
	cDebCred  := ""
	cDescMov  := ""
	cDescrMov := ""
	cDifer    := ""
	cErro     := ""
	cItem     := Replicate("0",TamSx3("IG_ITEM")[1])
	cNumMov   := ""
	cTipoMov  := ""
	lRet      := .T.
	lTemLacto := .F.
	lGravaSIF := .T.

	If __lF474Cta == NIL
		__lF474Cta := ExistBlock("F474CTA")
	Endif	

	cArqEnt := aConfig2[2]

	If Empty(nTipoDat)
		nTipoDat := IF(nTamDet > 202, 4,1)		//1 = ddmmaa		4= ddmmaaaa
	EndIf

	//Abre arquivo enviado pelo banco
	IF !FILE(cArqEnt)
		aAdd(aLog,{0,STR0034}) //"Arquivo do Banco não encontrado"
		lRet := .F.
	Else
		nHdlBco:=FOPEN(cArqEnt,0+64)
	EndIF

	If lRet 
		// Ler arquivo enviado pelo banco
		nLidos:=0
		FSEEK(nHdlBco,0,0)
		nTamArq:=FSEEK(nHdlBco,0,2)
		FSEEK(nHdlBco,0,0)

		cChkSum := F474CHKSUM(nHdlBco)

		SIF->(dbSetOrder(3))//IF_FILIAL + IF_ARQSUM
		If SIF->(dbSeek(xFilial("SIF") + cChkSum ) )
			aAdd(aLog,{0,STR0035}) //"Arquivo de Extrato já importado"
			Fclose(nHdlBco)
			lRet := .F.
		EndIf

		If lRet
			// Desenha o cursor e o salva para poder movimenta-lo
			nLidos 	:= 0

			nPosDIf   := Int(Val(Substr(cPosDif, 1,3)))
			nPosBco   := Int(Val(Substr(cPosBco, 1,3)))
			nPosAge   := Int(Val(Substr(cPosAge, 1,3)))
			nPosCta   := Int(Val(Substr(cPosCta, 1,3)))
			nPosNum   := Int(Val(Substr(cPosNum ,1,3)))
			nPosData  := Int(Val(Substr(cPosData,1,3)))
			nPosValor := Int(Val(Substr(cPosValor,1,3)))
			nPosOcor  := Int(Val(Substr(cPosOcor,1,3)))
			nPosDescr := Int(Val(Substr(cPosDescr,1,3)))

			While nLidos <= nTamArq
				nLinha++
				
				// Tipo qual registro foi lido
				cBuffer := Space(nTamDet)
				FREAD(nHdlBco,@cBuffer,nTamDet)
				
				// Verifica o diferencial do registro de Lancamento
				If !lFebraban  // 200 posicoes
					cDifer :=Substr(cBuffer,nPosDIf ,nLenDif )
				Else
					cDifer := "xx"  // 240 posicoes
				Endif
				
				// Header do arquivo
				IF (SubStr(cBuffer,1,1) == "0" .and. !lFebraban).or. ;  // 200 posicoes
					(Substr(cBuffer,8,1) == "0" .and. lFebraban)		// 240 posicoes
					nLidos+=nTamDet
					Loop
				EndIF
				
				//Trailer do arquivo
				IF (SubStr(cBuffer,1,1) == "9" .and. !lFebraban) .or. ;  //200 posicoes
					(Substr(cBuffer,8,1) == "9" .and. lFebraban)		 //240 posicoes
					nLidos+=nTamDet
					Exit
				EndIF
				
				// Saldo Inicial
				IF (SubStr(cBuffer,1,1) == "1" .and. cDifer == "0" .and. !lFebraban) .Or. (SubStr(cBuffer,8,1) == "1" .and. lFebraban)

					cBanco   := Substr(cBuffer,nPosBco ,nLenBco )
					cAgencia := Substr(cBuffer,nPosAge ,nLenAge )
					cConta   := Substr(cBuffer,nPosCta ,nLenCta )
					If __lF474Cta
						aConta   := ExecBlock("F474CTA", .F., .F., {cBanco, cAgencia, cConta} )
						cBanco   := aConta[1]
						cAgencia := aConta[2]
						cConta   := aConta[3]
					EndIf

					If cBanco != AllTrim(aConfig1[2])
						aADD(aLog,{0 , STR0071} )//"Arquivo de Extrato não pertence ao banco informado. Verifique arquivo de configuração e extrato." 
						lTemLacto := .T.
						lRet := .F.
						Exit
					EndIf	
						
					cBanco 		:= PadR( cBanco   , nTamA6Cod )
					cAgencia 	:= PadR( cAgencia , nTamA6Agn )
					cConta 		:= PadR( cConta   , nTamA6Num )

					A474VldBco(@cBanco , @cAgencia , @cConta, @nLinha, @aLog, @lRet)
							
					If !lRet
						aADD(aLog,{nLinha, STR0036 } ) //"Banco não cadastrado"
						lRet := .F.
						Exit
					Endif

					nLidos+=nTamDet
					Loop
				EndIF

				If lRet
					// Saldo Final
					IF (SubStr(cBuffer,1,1) == "1" .and. cDifer == "2" .and. !lFebraban) .or. ;
							(Substr(cBuffer,8,1) == "5" .and. lFebraban)
						nLidos+=nTamDet
						Loop
					EndIF
					
					// Lancamentos
					IF (SubStr(cBuffer,1,1) == "1" .and. cDifer == "1" .and. !lFebraban) .or. ;
							(Substr(cBuffer,8,1) == "3" .and. lFebraban)
						
						lTemLacto := .T.	
						If !__lF474Cta
							cBanco   := Substr(cBuffer,nPosBco,nLenBco )
							cAgencia := Substr(cBuffer,nPosAge,nLenAge )
							cConta   := Substr(cBuffer,nPosCta,nLenCta )
						Endif

						cBanco 		:= PadR( cBanco   , nTamA6Cod )
						cAgencia 	:= PadR( cAgencia , nTamA6Agn )
						cConta 		:= PadR( cConta   , nTamA6Num )

						A474VldBco( @cBanco , @cAgencia , @cConta, @nLinha, @aLog, @lRet )

						If lRet	

							cNumMov  := Substr(cBuffer,nPosNum,nLenNum)
							cDataBco := Substr(cBuffer,nPosData,nLenData)
							cDataBco := ChangDate(cDataBco,nTipoDat)
							dDataMov := Ctod(Substr(cDataBco,1,2)+"/"+Substr(cDataBco,3,2)+"/"+Substr(cDataBco,5,2),"ddmmyy")

							nValorMov := Round(Val(Substr(cBuffer,nPosValor,nLenValor))/100,2)
							cCodMov   := Substr(cBuffer,nPosOcor,nLenOcor)
							cDescrMov := Substr(cBuffer,nPosDescr,nLenDescr)
							
							dbSelectArea("SEJ")
							If dbSeek(xFilial("SEJ")+cBanco+cCodMov)
								cTipoMov := SEJ->EJ_OCORSIS
								cDescMov := SEJ->EJ_DESCR
								cDebCred := SEJ->EJ_DEBCRE
							Else
								aADD(aLog,{nLinha , STR0037 + " - " + cCodMov } ) //"Ocorrencia Não Encontrada"
								lRet 	:= .F.
							Endif

							If lRet
								// Grava dados no arquivo de trabalho
								If lGravaSIF
									F474GRVSIF(aConfig1, aConfig2 , dDataMov , '1', cChkSum)
									lGravaSIF:= .F.
								EndIf

								//Grava se não tiver inconsistência
								If SA6->(MsSeek(xFilial("SA6")+cBanco+cAgencia+cConta)) .And. SA6->A6_BLOCKED != "1" 	//A6_FILIAL+A6_COD+A6_AGENCIA+A6_NUMCON
									// Grava SIG
									cItem := Soma1(cItem)
									F474GRVSIG(aConfig1[1], cItem, '1', dDataMov, cNumMov, nValorMov, cCodMov, cDebCred, cBanco, cAgencia, cConta, cDescrMov, "")
									nContReg++
									If __lEfetTrf .and. lFina475 .and. SEE->EE_EFTTRF != '2' .and. cCodMov $ '102|105|109|110'  //102 = Encargos, '105' = Tarifas, '109' = CPMF, '110' = IOF 
										lRet := F475GrDes(oData,@cErro,.T.)
									Endif
								Else
									aADD(aLog,{nLinha , STR0015  + cBanco + STR0016 + cAgencia + STR0017 + cConta + STR0038 } )		//"Banco: "##" Agencia: "##" Conta: "##" não existe."
									lRet := .F.
								EndIf
							Endif
						EndIf
					Endif
				Endif
				nLidos += nTamDet
			Enddo

			If nContReg <= 0
				If !lTemLacto	
					aADD(aLogLanc,{0 , STR0039 } )	//"Este arquivo de extrato não possui lançamentos. "
					lRet := .F.
				ElseIf lRet
					aADD(aLog,{0 , STR0040 } )		//"Arquivo de Extrato Inválido. Verifique arquivo de configuração e extrato."
					lRet := .F.
				EndIf
			EndIf

			//Fecha arquivo do Banco 
			Fclose(nHdlBco)
		Endif
	Endif

Return lRet


//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} F474GRVSIF
	
	Gravação de registro na tabela SIF
	@type  Function
	@author Pequim
	@since 09/08/2022
	@version 12.1.2310

	@param cIdProc, Character, Id do processo de importação do extrato
	@param dDataMov, Date, Data do Movimento (Extrato)
	@param cBanco, Character, Código do banco
	@param cDescr, Character, Descrição informativa do processo
	@param cStatus, Character, Status do registro a ser gravado
	@param cArqCfg, Character, Arquivo de Configuração
	@param cArqImp, Character, Arquivo de Extrato
	@param cChkSum, Character, CheckSum do arquivo importado

/*/
//----------------------------------------------------------------------------------------------------
Function F474GRVSIF(aConfig1 as Array, aConfig2 as Array, dDataMov as Date, cStatus as Character, cChkSum as Character)

	Default cCHkSum = ""

	If __nTamHora == NIL
		__nTamHora := TamSx3("CV8_HORA")[1]
	Endif

	SIF->(DbSetOrder(1))		//IF_FILIAL + IF_IDPROC
	If SIF->(MsSeek(xFilial("SIF") + aConfig1[1]))
		RecLock("SIF",.F.)
		SIF->IF_ARQSUM	:= cChkSum
		SIF->IF_STATUS	:= cStatus
	Else
		RecLock("SIF",.T.)
		SIF->IF_FILIAL 	:= xFilial("SIF")
		SIF->IF_IDPROC  := aConfig1[1]
		SIF->IF_DTPROC  := dDataMov
		SIF->IF_BANCO	:= aConfig1[2]
		SIF->IF_AGENCIA	:= aConfig1[3]
		SIF->IF_CONTA	:= aConfig1[4]
		SIF->IF_SUBCTA	:= aConfig1[5]
		SIF->IF_DESC	:= aConfig1[6]
		SIF->IF_STATUS 	:= cStatus
		SIF->IF_ARQCFG	:= aConfig2[1]
		SIF->IF_ARQIMP	:= aConfig2[2]
		SIF->IF_ARQSUM	:= cChkSum
		SIF->IF_HORA	:= SubStr(Time(),1,__nTamHora)
	Endif
	SIF->(MsUnlock())

Return .T.

//----------------------------------------------------------------------------------------------------
/*/{Protheus.doc} F474GRVSIG
	Gravação de registro na tabela SIF
	@type  Function
	@author pequim
	@since 09/08/2022
	@version 12.1.2310

	@param cIdProc, Character, Id do processo de importação do extrato
	@param cItem, Character, Item do Extrato
	@param cStatus, Character, Status do registro a ser gravado
	@param dDataMov, Date, Data do Movimento (Extrato)
	@param cNumMov, Character, Número do movimento do extrato
	@param nValorMov, Numeric, Valor do movimento do extrato
	@param cCodMov, Character, Código do movimento do extrato
	@param cDebCred, Character, Débito/Crédito
	@param cBanco, Character, Banco do extrato
	@param cAgencia, Character, Agência do extrato
	@param cConta, Character, Conta corrente do extrato
	@param cDescrMov, Character, Descrição do movimento do extrato
	@param cDescFail, Character, Descrição da falha do processo

/*/
//----------------------------------------------------------------------------------------------------
Function F474GRVSIG(cIdProc as Character, cItem as Character, cStatus as Character, dDataMov as Date, cNumMov as Character, nValorMov as Numeric,;
				  cCodMov as Character, cDebCred as Character, cBanco as Character, cAgencia as Character, cConta as Character , cDescrMov as Character, cDescFail as Character, jRespAPI as Json)


	Default jRespAPI := JsonObject():New()

	If __lF474EFT == NIL
		__lF474EFT := ExistBlock("F474EFT")
	Endif	

	RecLock("SIG",.T.)
	SIG->IG_FILIAL 	:= xFilial("SIG")
	SIG->IG_IDPROC	:= cIdProc
	SIG->IG_ITEM	:= cItem
	SIG->IG_STATUS	:= cStatus
	SIG->IG_DTEXTR	:= dDataMov
	SIG->IG_DOCEXT	:= cNumMov
	SIG->IG_SEQMOV  := F474ProxNum("SIG")
	SIG->IG_VLREXT 	:= nValorMov
	SIG->IG_TIPEXT	:= cCodMov
	SIG->IG_CARTER	:= IF(cDebCred=="D","2","1")
	SIG->IG_BCOEXT  := cBanco
	SIG->IG_AGEEXT  := cAgencia
	SIG->IG_CONEXT  := cConta
	SIG->IG_HISTEXT := cDescrMov
	SIG->IG_FILORIG := cFilAnt
	SIG->IG_DESCRFA	:= cDescFail
	SIG->(MsUnlock())

	//Ponto de entrada utilizado para 
	// - Gravação complementar da SIG
	// - Possibilidade de gerar na SE5/FK5 os movimentos que existam na SIG mas não no Protheus
	// - Caso o extrato tenha sido importao por API envia o Json de resposta
	If __lF474EFT
		ExecBlock("F474EFT", .F., .F., { jRespAPI })
	Endif

Return .T.


//-------------------------------------------------------------------
/*/{Protheus.doc} F474CHKSUM

	Retorna o CheckSum do Arquivo.

	@type  Function
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
	@param nHdlBco, Numeric, Alias da tabela
		
/*/
//-------------------------------------------------------------------
Static Function F474CHKSUM(nHdlBco)

	Local cBuffer   as Character
	Local cIdArq    as Character
	Local cRet      as Character
	Local cTrailler as Character
	Local nOffSet   as Numeric
	Local nTamArq   as Numeric

	cRet      := ""
	cBuffer   := Space(402)
	nOffSet   := fSeek(nHdlBco,0,FS_RELATIVE) // Sera utilizado para retornar o ponteiro do arquivo a posicao original
	nTamArq   := fSeek(nHdlBco,0,FS_END) // Obtem o tamanho do arquivo
	cIdArq    := ""
	cTrailler := ""

	fSeek(nHdlBco,-804,FS_END) // Volta 804 bytes para compor o CheckSum

	// Le o arquivo ate final
	While fReadLn(nHdlBco,@cBuffer,402)
		cRet += cBuffer
	Enddo

	fSeek(nHdlBco,nOffSet,FS_SET) // Retorna o ponteiro para a posicao original

	cTrailler := cRet+Transform(nTamArq,"")

	cIdArq	 := Str(MsCrc32(cTrailler),10) 

Return cIdArq


//-------------------------------------------------------------------
/*/{Protheus.doc} F474ProxNum

	Retorna o próximo número da chave

	@type  Function
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
	@param cTab, Character, Alias da tabela		
/*/
//-------------------------------------------------------------------
Function F474ProxNum(cTab As Character) As Character

	Local aArea   as Array
	Local cCampo  as Character
	Local cChave  as Character
	Local cNewKey as Character
	Local nIndex  as Numeric

	aArea   := GetArea()
	cCampo  := ""
	cChave  := ""
	cNewKey := ""
	nIndex  := 0

	If cTab == "SIF"
		SIF->(dbSetOrder(1))//IF_FILIAL+IF_IDPROC
		cCampo := "IF_IDPROC"
		nIndex := 1	
	Else
		SIG->(dbSetOrder(2))//IG_FILIAL+IG_SEQMOV
		cCampo := "IG_SEQMOV"
		cChave := "IG_SEQMOV"+cEmpAnt
		nIndex := 2
	EndIf

	While .T.
		(cTab)->(dbSetOrder(nIndex))
		cNewKey := GetSXEnum(cTab,cCampo,cChave,nIndex)
		ConfirmSX8()
		If cTab == "SIF" 
			If (cTab)->(!dbSeek(xFilial(cTab) + cNewKey) )
				Exit
			EndIf
		Else
			If (cTab)->(!dbSeek(cNewKey) )
				Exit
			EndIf
		EndIf
	EndDo

	RestArea(aArea)
	FWFreeArray(aArea)

Return cNewKey

//-------------------------------------------------------------------
/*/{Protheus.doc} A474VldBco
	Valida o banco, agencia e conta 
	@type  Function
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
/*/
//-------------------------------------------------------------------
Function A474VldBco( cBanco As Character, cAgencia As Character, cConta As Character, nLinha As Numeric, aLog As Array, lRet As Logical )

	Local aAreaATU as Array
	Local aAreaSA6 as Array
	Local cFilSA6  as Character
	Local lStop    as Logical
	Local nSubAge  as Numeric
	Local nSubCon  as Numeric

	aAreaATU := GetArea()
	aAreaSA6 := SA6->( GetArea() )
	cFilSA6  := xFilial( 'SA6' )
	lStop    := .F.
	nSubAge  := 0
	nSubCon  := 0

	If !SA6->( MsSeek( cFilSA6 + cBanco + cAgencia + cConta ) )
		SA6->( MsSeek( cFilSA6 + cBanco ) )

		While !SA6->( Eof() ) .And. cFilSA6 == SA6->A6_FILIAL .And. cBanco == AllTrim(SA6->A6_COD) .And. !lStop
			
			If SA6->A6_BLOCKED = '1' //Se banco estiver bloqueado deverá ser pulado
				SA6->( DbSkip() )
				Loop
			EndIf
				
			nSubAge := At( Alltrim( SA6->A6_AGENCIA ) , cAgencia )
			nSubCon := At( Alltrim( SA6->A6_NUMCON  ) , cConta   )
			If nSubAge > 0 .And. nSubCon > 0
				If ( SubStr( cAgencia , 1 , nSubAge-1 ) == StrZero( 0 , nSubAge-1 ) .Or. ;// Valida 0 a esquerda: Agencia 
					Alltrim( SA6->A6_AGENCIA ) == AllTrim( cAgencia ) ) ;
				.And. ;
				( SubStr( cConta   , 1 , nSubCon-1 ) == StrZero( 0 , nSubCon-1 ) .Or. ;// Valida 0 a esquerda: Conta Corrente
					Alltrim( SA6->A6_NUMCON  ) == AllTrim( cConta   ) )
					cAgencia := SA6->A6_AGENCIA
					cConta   := SA6->A6_NUMCON
					cBanco   := SA6->A6_COD
					lStop    := .T.
				EndIf
			EndIf
			SA6->( DbSkip() )
		EndDo
		
		If Empty(nSubAge) .or. Empty(nSubCon)  
			aADD(aLog,{nLinha , STR0015  + cBanco + STR0016 + cAgencia + STR0017 + cConta + STR0038 } )		//"Banco: "##" Agencia: "##" Conta: "##" não existe."
			lRet := .F.		
		EndIf
	
	EndIf

	RestArea( aAreaSA6 )
	RestArea( aAreaATU )
	FWFreeArray(aAreaSA6)
	FWFreeArray(aAreaATU)

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} FA474VlBC
	Valida campos vazios da tela de wizard

	@type  Function
	@author pequim
	@since 20/07/2022
	@version 12.1.2310
/*/
//-------------------------------------------------------------------
Function FA474VlBC(aCfgParam)

	Local lRet As Logical
	Local nY   as Numeric

	lRet := .T.
	nY   := 0

	Default aCfgParam := {}

	For nY := 1 To Len(aCfgParam)
		If Empty(aCfgParam[nY])
			Help( ,,"FA474VlBC",, STR0041 , 1, 0 ) // "Existem campos obrigatorios não preenchidos. Favor verificar"
			lRet := .F.
			Exit
		Endif
	Next nY

Return lRet


//----------------------------------------------------------------------------------
/*/{Protheus.doc} FA474WHEN
	Define a ativação dos campos referentes ao Job de Importação de Extratos

	@type  Function
	@author pequim
	@since 22/07/2022
	@version 12.1.2310

	@return lRet, Logical, Ativa ou não o uso dos campos
/*/
//----------------------------------------------------------------------------------
Function FA474WHEN()
	
	Local lRet := .F. As Logical

	If __lExtAPI == NIL
		__lExtAPI := SEE->(ColumnPos("EE_EXTAPI")) > 0
	EndIf

	If M->EE_EXTJOB == '1' .And. (!__lExtAPI .or.  (__lExtAPI .And.  M->EE_EXTAPI != '2'))
		lRet := .T.
	Endif

Return lRet	


//----------------------------------------------------------------------------------
/*/{Protheus.doc} FA474OK
	Validação dos campos referentes ao Job de Importação de Extratos na SEE

	@type  Function
	@author pequim
	@since 22/07/2022
	@version 12.1.2310

	@param cCampo, Character, Campo em validação
	@param cDado , Character, Valor do campo em validação
	@param lMsg  , Logical  , Apresenta ou não a mensagem de erro

	@return lRet, Logical, Ativa ou não o uso dos campos
/*/
//----------------------------------------------------------------------------------
Function FA474OK(cCampo As Character, cDado As Character, lMsg As Logical, lJob As Logical)
	
	Local cDescCpo as Character
	Local cMsg     as Character
	Local cMsgCpo  as Character
	Local lRet     as Logical

	Default cCampo := ""
	Default cDado  := ""
	Default lMsg   := .T.
	Default lJob   := .F.

	cDescCpo := ""
	cDirPrin := ""
	cDirFull := ""
	cMsgCpo  := ""
	cMsg     := ""
	lRet     := .T.

	If  !lJob .and. ALTERA 
		if Empty(M->EE_EXTJOB)		//Habilita o Job de importação do extrato bancário
			M->EE_EXTJOB := "2"
		Endif
		if Empty(M->EE_EXTCONA)		//Pré Conciliação automática
			M->EE_EXTCONA := "3"
		Endif
	Endif

	If __lExtAPI == NIL
		__lExtAPI := SEE->(ColumnPos("EE_EXTAPI")) > 0
	EndIf

	If M->EE_EXTJOB == '1' .And. (!__lExtAPI .or.  (__lExtAPI .And.  M->EE_EXTAPI != '2')) 	//Habilita o Job de importação do extrato bancário ou Pré Conciliação automática

		if cCampo $ "EE_EXTDIRC|EE_EXTDIRA|EE_EXTDIRB|EE_EXTDIRF"

			if cCampo == "EE_EXTDIRC"
				cDescCpo := STR0060 	//"Dir.Arq.Cfg."
				cMsgCpo  := STR0049		//"Diretorio de arquivo de configuração de retorno automatico dos extratos não foi encontrado."
			Elseif cCampo == "EE_EXTDIRA"
				cDescCpo := STR0050		//"Dir.Ext.Proc"
				cMsgCpo  := STR0051		//"Diretório de arquivos de extrato a processar não foi encontrado."
			Elseif cCampo == "EE_EXTDIRB"
				cDescCpo := STR0052		//"Dir.Ext.Bkp."
				cMsgCpo  := STR0053		//"Diretório de arquivos de extrato processados não foi encontrado."
			Elseif cCampo == "EE_EXTDIRF"
				cDescCpo := STR0054		//"Dir.Ext.Fail"
				cMsgCpo  := STR0055		//"Diretório de arquivos de extrato com falha no processamento não foi encontrado."
			Endif

			if Empty(cDado)
				cMsg := STR0043 +" "+ cDescCpo	//"Quando o processo de importação automática de extratos bancários for ativado, este campo é obrigatório. Campo -->"
				lRet := .F.
			Else
				cDadoCpo := M->&cCampo := Padr(Alltrim(cDado)+if(Right(Alltrim(cDado),1)=="\","","\"),Len(cDado))

				if Len(Directory(Alltrim(cDadoCpo)+"*.*","D")) <= 0
					cMsg := cMsgCpo + CRLF +  STR0044 	//"Especifique um diretorio existente e tente novamente."
					lRet := .F.
				Else
					if ! F474VlDir(cCampo, cDadoCpo)
						cMsg := STR0045		//"Todos os diretorios utilizados devem ser diferentes."
						lRet := .F.
					Else	
						if !FA474DIR(cDadoCpo)
							cMsg := STR0046 + CRLF +  STR0048	//"O diretorio especificado já está em uso em outro banco."###"Especifique um diretório ainda não usado e tente novamente."
							lRet := .F.
						Endif
					Endif	
				Endif
			Endif

		Elseif cCampo == "EE_EXTARQC"
			if Empty(cDado)
				cDescCpo := STR0056		//"Arq.Ext.CFG"
				cMsg := STR0043 +" "+ cDescCpo	//"Quando o processo de importação automática de extratos bancários for ativado, este campo é obrigatório. Campo -->"
				lRet := .F.
			Endif

		Elseif cCampo == "EE_EXTARQR"
			if Empty(cDado)
				cDescCpo := STR0057		//"Arq.Ext.RET"
				cMsg := STR0043 +" "+ cDescCpo	//"Quando o processo de importação automática de extratos bancários for ativado, este campo é obrigatório. Campo -->"
				lRet := .F.
			Endif

		Elseif cCampo == "EE_EXTFPRC"
			cDescCpo := STR0058		//"Filial Proc."
			if Empty(cDado)
				cDescCpo := STR0058		//"Filial Proc."
				cMsg := STR0043 +" "+ cDescCpo	//"Quando o processo de importação automática de extratos bancários for ativado, este campo é obrigatório. Campo -->"
				lRet := .F.
			else
				lRet := FWFilExist(cEmpAnt,M->EE_EXTFPRC)
				If lRet
					M->EE_EXTNFPR := FWFilialName(cEmpAnt,M->EE_EXTFPRC)
				Else	
					cMsg := STR0062		//"A filial informada não existe dentro do grupo de empresas logado. Por favor, informe uma filial válida."
				Endif
			Endif
		Endif

		If !lJob .and. lMsg .and. !lRet .and. !Empty(cMsg)
			Help(' ', 1, STR0059,, cMsg, 2, 0)
		Endif
	Endif

Return( lRet )


//----------------------------------------------------------------------------------
/*/{Protheus.doc} VldDiret
	Valida Diretórios informados

	@type  Function
	@author pequim
	@since 25/07/2022
	@version version
	@param cCampo   , Character, Campo em validação
	@param cConteudo, Character, Valor do campo em validação
	@return lRet    , Logical  , Validação do campo
/*/
//----------------------------------------------------------------------------------
Function F474VlDir(cCampo As Character, cConteudo As Character) As Logical

	Local aCpo  as Array
	Local lRet  as Logical
	Local nA    as Numeric
	Local nElem as Numeric

	lRet := .T.
	aCpo := {{"EE_EXTDIRC",Alltrim(Upper(M->EE_EXTDIRC))},;
			 {"EE_EXTDIRA",Alltrim(Upper(M->EE_EXTDIRA))},;
			 {"EE_EXTDIRB",Alltrim(Upper(M->EE_EXTDIRB))},;
			 {"EE_EXTDIRF",Alltrim(Upper(M->EE_EXTDIRF))}}

	cConteudo := Alltrim(Upper(cConteudo))

	nElem := Ascan(aCpo,{|e| e[1] == cCampo})

	For nA := 1 to Len(aCpo)
		if nA <> nElem
			if ! Empty(aCpo[nA,2]) .and. cConteudo == aCpo[nA,2]
				lRet := .F.
				Exit
			Endif
		Endif
	Next

Return( lRet )	


//----------------------------------------------------------------------------------
/*/{Protheus.doc} FA474DIR
	Valida se todos os diretorios informados sao diferentes

	@type  Function
	@author pequim
	@since 25/07/2022
	@version 12.1.2310

	@param cDado , Character, Valor do campo em validação
	@return lRet , Logical  , Validação
/*/
//----------------------------------------------------------------------------------
Function FA474DIR(cDado As Character) As Logical
	Local cAliasQry As Character
	Local cQuery    as Character
	Local lRet      as Logical

	cAliasQry := "" // alias temporario dos banco que serao executados
	cQuery    := "" // query de bancos que serao executados automaticamente
	lRet      := .T.

	cDado := Upper(Alltrim(cDado))

	//seleciona todas as contas que estao programadas para importação automática de extratos
	If __oQry474 == NIL
		cQuery := "SELECT R_E_C_N_O_ AS RECNO "
		cQuery += " FROM "+RetSqlName("SEE")+ " SEE "
		cQuery += "WHERE ( UPPER(EE_EXTDIRC) = ? "
		cQuery +=     " OR UPPER(EE_EXTDIRA) = ? "
		cQuery += 	  " OR UPPER(EE_EXTDIRB) = ? "
		cQuery +=     " OR UPPER(EE_EXTDIRF) = ? ) "
		cQuery += " AND SEE.D_E_L_E_T_ = ' '"
        cQuery  := ChangeQuery(cQuery)
		oQry474 := FWPreparedStatement():New(cQuery)                                
    EndIf

	oQry474:SetString(1, cDado)
	oQry474:SetString(2, cDado)
	oQry474:SetString(3, cDado)
	oQry474:SetString(4, cDado)

	cQuery := oQry474:GetFixQuery() 

	cAliasQry := MpSysOpenQuery(cQuery)
	lRet := (cAliasQry)->(EOF())

	If ALTERA .And. !lRet
		lRet := SEE->(Recno()) == (cAliasQry)->RECNO
	EndIf

	(cAliasQry)->(DbCloseArea())

Return( lRet )


//------------------------------------------------------------------------------
/*/{Protheus.doc} F474DicOk()
	Verifica se o dicionário está atualizado (SEE e SIF)
	
	@type  Function
	@author pequim
	@since 09/08/2022
	@version 12.1.2310
/*/
//------------------------------------------------------------------------------
Function F474DicOk()

	If __lUpdated == NIL
		__lUpdated := (SEE->(ColumnPos("EE_EXTJOB")) > 0 .and. SIF->(ColumnPos("IF_CONTA")) > 0 .and. ;
						SIG->(ColumnPos("IG_BCOEXT")) > 0 .and. SIG->(ColumnPos("IG_MSUIDT")) > 0 .and. ;
						SEE->(ColumnPos("EE_EXTAPI")) > 0)
	Endif

Return __lUpdated


//-------------------------------------------------------------------
/*/{Protheus.doc} F474VIS
Define a operação de visualização
@author  pequim
@since 12/08/2022
@version 12
/*/
//-------------------------------------------------------------------
Function F474VIS()
	Local aButtons As Array
	Local oModel   as Object

	aButtons := {{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.T.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil}}

	oModel   := FwLoadModel("FINA474")
	oModel:SetOperation(MODEL_OPERATION_VIEW)
	oModel:Activate()

	FWExecView( STR0007, "FINA474", MODEL_OPERATION_VIEW,/*oDlg*/,/*bCloseOnOk*/,/*bOk*/,,aButtons,/*bCancel*/,/*cOperatId*/,/*cToolBar*/, oModel )	//'Visualizar'

	oModel:Deactivate()
	oModel:Destroy()
	oModel:= Nil
Return


//-------------------------------------------------------------------
/*/{Protheus.doc} F474EXC()
Define operacao de exclusao

@author  pequim
@since 12/08/2022
@version 12
/*/
//-------------------------------------------------------------------
Function F474EXC()
	Local aEnableButtons as Array
	Local nOpc           as Numeric
	Local oModel         as Object

	If lF474Auto
		SIF->(DbSetOrder(1))
		MsSeek(aAutoCab[1]+aAutoCab[2])  //xFilial("SIF")+ IF_IDPROC
	Endif

	aEnableButtons := {{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.T.,Nil},{.T.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil},{.F.,Nil}} //"Confirmar"###"Fechar"

	nOpc := MODEL_OPERATION_DELETE

	oModel := FwLoadModel("FINA474")
	oModel:SetOperation(nOpc)
	oModel:Activate()

	If !lF474Auto
		FWExecView(STR0008,"FINA474", nOpc,/*oDlg*/,/*bCloseOnOk*/,/*bOk*/,,aEnableButtons,/*bCancel*/,/*cOperatId*/,/*cToolBar*/, oModel ) //'Excluir'
	Else
		If oModel:VldData()
			oModel:CommitData()
		Endif
	Endif

	oModel:Deactivate()
	oModel:Destroy()
	oModel:= Nil

Return

